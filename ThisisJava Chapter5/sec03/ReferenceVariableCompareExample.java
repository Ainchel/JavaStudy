package ch05.sec03;

public class ReferenceVariableCompareExample {
	//데이터 타입 분류, 메모리 사용 영역, 참조타입 변수의 ==, != 연산에 대하여.

	// 자바의 데이터 타입 분류에 대하여.
	// 자바의 데이터 타입은 크게 기본 타입과 참조 타입으로 나뉜다.
	// 참조 타입이란, "객체"의 번지(주소)를 참조하는 타입이다.
	// 여기서 객체란, 데이터와 메소드로 구성된 하나의 덩어리를 일컫는다.(6장에서 설명)
	// 참조 타입으로는 배열, 열거, 클래스, 인터페이스 타입이 있다.

	
	// 기본 타입 변수와 참조 타입 변수의 차이는, 저장되는 값 부분에 있다. 
	// 기본 타입 변수는 해당 메모리에 값 자체를 저장한다.
	// 참조 타입 변수는 해당 메모리에 객체가 생성된 메모리 번지(주소)를 저장한다.

	
	// 자바의 메모리 사용 영역에 대하여.
	// 자바 프로그램을 실행하여 JVM이 구동되면, JVM은 운영체제에서 할당받은 메모리 영역을 아래와 같이 구분하여 사용한다.
	// 1) 메소드 영역 (Method Area) : 바이트코드 파일을 읽은 코드가 저장되는 곳. 상수, 정적 필드, 메소드 코드, 생성자 코드 등이 저장된다.
	// 2) 힙 영역 (Heap Area) : 객체가 생성되는 영역이다. 
	// 3) 스택 영역 (Stack Area) : 메소드를 호출할 때 생성되는 "스택 프레임" 이 저장되는 영역이다. 메소드 내에서의 기본/참조 타입 변수가 생성되고 제거된다.
	
	
	// 참조 타입 변수의 ==, != 연산에 대하여.
	// ==, != 연산자는 변수에 들어간 값이 같은지 아닌지를 검사한다.
	// 참조 타입 변수에 들어가 있는 값은 해당 객체의 번지(주소)이다.
	// 따라서, 참조 타입 변수 간의 ==, != 연산자는 주소값을 비교하는 것이 된다.
	// 이 경우, 주소값이 같다면 같은 객체를 참조하는 것이며, 다르다면 다른 객체를 참조하는 것이 된다.
	
	public static void main(String[] args) {
		
		//아래는 기본타입 변수와 참조타입 변수를 초기화했을 때 메모리 상에서 어떤 차이가 있는지를 설명하는 예제.
		
		//1) 기본 타입 변수와 참조 타입 변수 모두 선언과 초기화를 하는 순간, stack 메모리 영역에 생성된다.
		//2) 기본 타입 변수인 age와 price에는, 초기화한 값 자체가 들어간다.
		//3) 참조 타입 변수인 name과 hobby에는, 초기화한 값이 아닌 해당 객체의 주소값이 들어간다.
		//4) 참조 타입의 변수가 아닌 실제 객체가 heap에 별도로 생성되며, 변수 이름(주소)을 통해 해당 객체에 접근한다.
		
		int age = 25; // 기본 타입 변수. 값 자체가 들어감.
		double price = 100.5; // 기본 타입 변수. 값 자체가 들어감.
		
		String name = "히나";	 // 참조 타입 변수.	name에는 heap에 생성된 객체의 주소가 저장됨.
		String hobby = "게임"; // 참조 타입 변수. hobby에는 heap에 생성된 객체의 주소가 저장됨.
		
		//아래는 배열이라는 객체의 변수로 ==, != 연산자를 사용하여 같은 배열을 참조하는지 검사하는 예제.
		
		int[] arr1;
		int[] arr2;
		int[] arr3;
		
		arr1 = new int[] {1,2,3};
		arr2 = new int[] {1,2,3};
		arr3 = arr2;
		
		System.out.println(arr1 == arr2); // false 출력 : 저장되어 있는 내용이 같은 거지, 같은 객체를 참조하는 것은 아님!
		System.out.println(arr2 == arr3); // true 출력 : arr3 = arr2를 했으므로, 둘은 같은 객체를 참조한다.		
	}

}
