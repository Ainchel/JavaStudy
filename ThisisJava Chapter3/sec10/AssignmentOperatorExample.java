package ch03.sec10;

public class AssignmentOperatorExample {
	//대입 연산자에 대하여.
	//대입 연산자는 우측 피연산자의 값을 좌측 피연산자 변수에 대입한다.
	//이 때 우측 피연산자는 리터럴, 변수, 연산식이 올 수 있다.
	//단순히 값을 대입만 해주는 단순 대입 연산자, 연산을 수행한 후 값을 대입하는 복합 대입 연산자가 있다.
	
	//아래는 단순 대입 연산자
	//1) = : 우측 피연산자의 값을 좌측 변수에 저장한다.
	
	//복합 대입 연산자
	//1) += : 우측의 피연산자 값을 좌측 변수에 더한 값을 다시 좌측 변수에 저장
	//변수 a가 있을 때 a = a + 피연산자; 와 같다.
	
	//2) -= : 우측의 피연산자 값을 좌측 변수에서 뺀 후 좌측 변수에 대입
	//a = a - 피연산자; 와 같다.
	
	//3) *= : 우측의 피연산자 값을 좌측 변수에 곱한 후 좌측 변수에 대입
	//a = a * 피연산자; 와 같다.
	
	//4) /= : 우측의 피연산자 값으로 좌측 변수를 나눈 후 좌측 변수에 대입
	//a = a / 피연산자; 와 같다.
	
	//5) %= : 우측의 피연산자 값으로 좌측 변수를 나눈 나머지 값을 좌측 변수에 대입.
	//a = a % 피연산자; 와 같다.
	
	//6) &= : 우측의 피연산자 값으로 좌측 변수를 논리곱한 결과를 좌측 변수에 대입.
	//a = a & 피연산자; 와 같다.
	
	//7) |= : 우측의 피연산자 값으로 좌측 변수를 논리합한 결과를 좌측 변수에 대입.
	//a = a | 피연산자; 와 같다.
	
	//8) ^= : 우측의 피연산자 값으로 좌측 변수를 배타적 논리합한 결과를 좌측 변수에 대입.
	//a = a ^ 피연산자; 와 같다.
	
	//9) <<= : 우측의 피연산자 값으로 좌측 변수를 좌측 비트 이동 연산한 결과를 좌측 변수에 대입.
	//a = a << 피연산자; 와 같다.
	
	//10) >>= : 우측의 피연산자 값으로 좌측 변수를 우측 비트 이동 연산한 결과를 좌측 변수에 대입.
	//a = a >> 피연산자; 와 같다.
	
	//11) >>>= : 우측의 피연산자 값으로 좌측 변수를 우측 비트 이동(빈자리 0으로 채우는) 연산한 결과를 좌측 변수에 대입.
	//a = a >>> 피연산자; 와 같다.
	
	public static void main(String[] args) {
	//아래는 사칙연산 류의 대입 연산자 사용 예제.
		
	int result = 0;
	result += 10;
	System.out.println("result = " + result);
	result -= 5;
	System.out.println("result = " + result);
	result *= 3;
	System.out.println("result = " + result);
	result /= 5;
	System.out.println("result = " + result);
	result %= 3;
	System.out.println("result = " + result);
	
	}

}
