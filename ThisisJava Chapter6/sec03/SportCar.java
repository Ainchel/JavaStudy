package ch06.sec03;

public class SportCar {

	//객체 지향 프로그래밍에 대하여.
	//어떤 제품을 만들 때에는, 부품을 먼저 만든 후 조립하여 만든다.
	//소프트웨어도 마찬가지로, 부품에 해당하는 '객체' 를 만들어 조립한다.
	
	//객체란, 속성(필드-멤버변수)과 동작(메소드-멤버함수)으로 구성되어 있다.
	//서로 다른 객체 간 상호작용은 메소드를 통해(호출하여) 이루어진다.
	
	//메소드의 호출은 아래 형태로 이루어진다.
	//메소드 명(매개값1, 매개값2...);
	//매개값은 메소드가 실행할 때 필요한 값이며, 필요없다면 생략할 수도 있다.
	//리턴값은 메소드 실행의 결과이며, 메소드의 마지막에 호출한 곳에 해당 값을 반환한다.
	//리턴값도 필요가 없다면 생략할 수 있다.
	
	//객체지향 프로그래밍의 특징은 캡슐화, 상속, 다형성이다.
	//캡슐화란, 객체의 데이터(필드)와 동작(메소드)의 실제 구현 내용을 외부에 감추는 것이다.
	//외부 객체(다른 클래스의 객체)는 해당 객체의 구조를 알수 없으며, 의도한 필드와 메소드만 이용할 수 있다.
	//캡슐화를 하는 이유는, 외부에서 해당 객체를 잘못 사용하여 손상되지 않게끔 하기 위해서이다.
	//자바에서는 위와 같이, 캡슐화된 멤버(필드/메소드)를 보일지 숨길지를 '접근 제한자'를 통해 설정할 수 있다.
	
	//상속이란, 두 객체를 부모 - 자식 사이로 설정하여, 부모 객체의 필드와 메소드를 자식 객체가 사용할 수 있게끔 하는 것이다.
	//상속을 하는 이유는 아래와 같다.
	//1)부모 객체의 완성도 높은 코드를, 자식 객체에서 재사용할 수 있어 중복 코딩/코드 낭비 등을 하지 않아도 된다.
	//2)부모 객체의 필드와 메소드만 수정하면 모든 자식 객체들이 수정된 필드와 메소드를 사용할 수 있다.

	//다형성이란, 같은 사용 방법을 취해도 실행 결과가 다양하게 나오는 성질을 말한다.
	//비유 : 자동차에 들어가는 '타이어'는 사용 방법이 같지만, 다른 타이어를 끼우면 주행 성능이 달라질 수 있는 것과 같다.
	//다형성을 구현하려면 상속과 인터페이스라는 것을 구현할 수 있어야 한다.
	
	
	//객체와 클래스에 대하여.
	//클래스는 설계도에 불과하며, 클래스의 객체를 만들어야 실체를 가진다.
	//클래스 선언은 소스 파일을 생성할 때와 똑같은 방법으로 생성한다.
	//클래스의 이름은 대문자로 하고, 캐멀 스타일(첫 대문자+단어 시작마다 대문자)
	//클래스 이름의 첫글자는 숫자가 될 수 없고, 특수문자는 $와 _를 사용할 수 있다.
	//하나의 소스 파일에 여러개의 클래스 선언이 포함될 수 있다.
	//여러 클래스가 선언된 소스파일을 컴파일하면, 바이트코드(기계어 번역 이전의 번역 단계) 파일이 선언한 클래스 수만큼 생긴다.
	//복수 개의 클래스를 선언할 때 주의점 - public 접근제한자는 파일명과 같은 클래스에만 사용 가능하다.
	
	
	//클래스 객체를 생성하려면 new 연산자를 사용해야 한다.
	// 클래스 변수 = new 클래스();
	//위 코드로 객체를 생성하면, 클래스 변수에는 객체의 주소가, 실제 객체가 heap 영역에 생긴다.
	
	public class Test{
		
		class Tier{
			
		}
		
	}
	
	
	public static void main(String[] args) {

	}

}
