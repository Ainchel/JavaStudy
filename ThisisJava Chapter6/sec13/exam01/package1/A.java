package ch06.sec13.exam01.package1;

//접근 제한자에 대하여.

//경우에 따라서, 객체의 필드를 외부에서 변경하거나 메소드를 호출할 수 없도록 막아야 할 때가 있다.
//중요한 필드와 메소드가 외부로 노출되지 않게 함으로써 무결성(결점이 없는 성질)을 유지할 수 있다.

//위 기능을 구현하기 위해 접근 제한자를 사용한다.
//접근 제한자는 public, protected, private의 세 가지 종류가 있다.

//접근제한자 별 제한 대상 및 제한 범위는 아래와 같다.

//1) public - 제한 대상(사용 가능 대상) : 클래스, 필드, 생성자, 메소드
//			  제한 범위 : 없음(다른 패키지에서 모두 사용 가능)
//2) protected - 제한 대상 (사용 가능 대상) : 필드, 생성자, 메소드
//				 제한 범위 : 같은 패키지 내, 혹은 자식 객체만 사용 가능
//3) private - 제한 대상 (사용 가능 대상) : 필드, 생성자, 메소드
//			   제한 범위 : 해당 객체 내부에서만 사용 가능
//4) default - 제한 대상(사용 가능 대상) : 클래스, 필드, 생성자, 메소드
//			   제한 범위 : 같은 패키지 내에서 사용 가능

//클래스는 public, default 접근 제한에 따라 사용 가능 범위가 결정된다.
//클래스는 public을 명시할 경우 public, 명시하지 않았다면 default로 설정된다.
//public 접근 제한자의 경우, 자신 패키지 외에 다른 패키지에서도 사용할 수 있다.
//default로 설정됐을 경우, 다른 패키지에서는 사용할 수 없게 된다.

//생성자는 public, default, private 접근 제한에 따라 사용 가능 범위가 결정된다.
//public일 경우, 모든 패키지에서 생성자를 호출(==객체를 생성)할 수 있다.
//기재하지 않았을 경우(default), 같은 패키지에서만 생성자를 호출(==객체를 생성)할 수 있다.
//private일 경우, 클래스 내부에서만 생성자를 호출(==객체를 생성)할 수 있다.

public class A { // default 접근제한자로 설정(public 미기재 시)

	//필드 선언
	A a1 = new A(true);
	A a2 = new A(1);
	A a3 = new A("문자열");
	
	public A(boolean b) {} // public 접근 제한자의 생성자 선언
	A(int b){} // default 접근 제한자(미기재 시)의 생성자 선언
	private A(String s) {} // private 접근 제한자의 생성자 선언
}
