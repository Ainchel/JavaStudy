package ch06.sec04;

public class StudentExample {

	//클래스 객체를 생성하려면 new 연산자를 사용해야 한다.
	// 클래스명 변수명 = new 클래스명();
	//위 코드로 객체를 생성하면, 클래스 변수에는 객체의 주소가, 실제 객체가 heap 영역에 생긴다.
	
	//클래스는 용도에 따라 두 가지로 나뉜다.
	//1) 라이브러리(library) 클래스 : 실행되지 않으며 다른 클래스에서 이용하는 클래스
	//2) 실행 클래스 : main()메소드를 가지고 있는, 실행 가능한 클래스.
	
	//클래스의 구성 멤버에 대하여.
	//클래스를 선언한다는 것은, 객체의 초기화를 담당하는 생성자, 객체에 포함된 필드와 메소드를 선언한다는 것이다.
	
	//필드는 객체의 데이터를 저장하는 역할을 한다.
	//필드를 선언하는 방법은 변수를 선언하는 방법과 동일하지만, 클래스 블록에서 선언되어야 필드 선언이 된다.
	
	//필드는 클래스 블록 내에서 선언하고, 객체 내/외부에서 사용이 가능하며, 객체가 존재하는 동안 계속 살아있는다.
	//클래스 내 로컬 변수는 클래스의 생성자와 메소드 블록에서 선언하고, 해당 블록 내에서만 사용이 가능하며, 해당 블록이 끝나면 소멸된다.
	//필드에 사용하는 데이터 타입은 기본타입 및 참조타입(배열, 클래스, 인터페이스) 모두 가능하다.
	//필드명은 첫글자를 소문자로 하는 캐멀 스타일로 작성하는 것이 관례이다.
	
	
	//아래는 클래스 선언 예제.
	class ClassName{
		// 필드 선언 : 객체의 데이터가 저장된다. 선언 형태는 변수와 비슷하다.
		int fieldName; 
		
		//아래는 필드 선언 추가 예시 : 생성자나 메소드가 아닌, 클래스 블록에서 선언해야 한다.
		String model = "그랜저";
		int Speed = 300;
		boolean start = true;
		Tire tire = new Tire();
		
		class Tire{
			
		}
		
		//생성자 선언 : 객체 생성 시 데이터의 초기화를 담당한다. 생성자는 리턴 타입이 없고, 이름이 클래스명과 동일해야 한다.
		ClassName() {}
		
		//메소드 선언 : 객체의 동작으로, 호출 시 정해진 코드를 작동시킨다.
		int methodName() {return 0;}
		
	}
	

	
	public static void main(String[] args) {

		//Student라는 클래스의 객체 만들어보기 예제.
		
		Student s1 = new Student();
		System.out.println("s1 변수는 Student 객체를 참조합니다.");
		
		Student s2 = new Student();
		System.out.println("s2 변수는 또 다른 Student 객체를 참조합니다.(new 사용)");
		
	}

}
