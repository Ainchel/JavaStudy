package ch06.sec12.hyundai;

// 패키지에 대하여.
// 자바의 패키지는 단순한 디렉토리(폴더)를 의미하지 않는다.
// 패키지는 클래스의 일부분이며, 클래스를 식별할 때 쓰인다.

// 패키지의 이름은 도메인의 역순으로 만든다. ex ) mycompany.com이 도메인이라면 com.mycompany.클래스명.
// 패키지 명이 다를 경우, 같은 이름의 클래스명을 구별되는 클래스로 관리할 수 있다.
// 패키지의 구분은 패키지명 상의 '.'로 구분하며, .을 하나 쓸 때마다 하위 패키지로 들어간다.

// 클래스는 패키지 명까지 포함한 이름이 전체 이름이며, 패키지가 다를 경우 클래스의 이름이 같아도 다른 클래스이다.
// 패키지에 속한 바이트코드 파일은 다른 디렉토리로 이동할 수 없다. 이동할 시 클래스를 사용할 수 없다.

// 패키지 선언이란 다른 패키지의 클래스를 사용하기 위해 불러오는 것으로, package 키워드와 함께 패키지 이름을 적는다.
// 패키지 선언은 항상 소스 파일 최상위에 위치해야 한다.
// 패키지 이름은 모두 소문자로 작성하는 것이 관례이다. 패키지 이름은 상기했듯 도메인 역순으로 적고, 마지막에 프로젝트 이름을 적는다.
// 패키지 선언이 없을 경우 이클립스는 "default package"에 포함시키며, 패키지가 없다는 뜻이다.(자주 있는 케이스는 아님)

// 같은 패키지 내에 있는 클래스는 아무 조건 없이 쓸 수 있지만, 다른 패키지의 클래스를 쓰려면 import를 해야 한다.
// import문은 패키지 선언과 클래스 선언 사이이다.
// import 키워듸 뒤에는 사용하고자 하는 클래스의 전체 이름을 적어야 한다.
// 만약 패키지 내에 포함된 다수의 클래스를 사용하려면, 클래스 이름 대신 '*'를 적는다.

// import문은 하위 패키지를 포함하지 않는다. 따라서, 하위 패키지를 사용해야 한다면 해당 패키지까지 각각 기재해야 한다.

// 서로 다른 패키지에 동일한 클래스 이름이 있을 경우, 두 패키지를 모두 import했을 경우 해당 클래스를 사용할 수 없다.
// 이유 : 두 패키지에 모두 있는 클래스 이름이므로, 어떤 애를 써야되는건지 컴퓨터가 인식할 수 없어서.
// 이럴 경우, 패키지명을 포함하는 클래스 명을 명시해주면 컴퓨터가 알아볼 수 있다.


// import 문으로 다른 패키지의 클래스 사용을 명시해보는 예제.
import ch06.sec12.hankook.SnowTire;
import ch06.sec12.kumho.AllSeasonTire;

public class Car {
	//import 없이, 패키지 + 클래스 전체를 기재하여 필드를 선언
	ch06.sec12.hankook.Tire tire1 = new ch06.sec12.hankook.Tire();
	ch06.sec12.kumho.Tire tire2 = new ch06.sec12.kumho.Tire();
	
	SnowTire tire3 = new SnowTire();
	AllSeasonTire tire4 = new AllSeasonTire();

}
