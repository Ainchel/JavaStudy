package ch02.sec09;

public class OpertaionPromotionExample 
{
	//연산 식에서의 자동 타입 변환에 대한 정리.
	//참고 : 자바는 컴파일 단계에서 코드 상의 리터럴(변수 등이 아닌 직접 넣은 값)연산을 미리미리 수행한다. (실행 시 연산하는 것보다 성능이 좋음)
	//하지만 리터럴이 아닌 변수로 연산할 경우, 위 규칙과 다르게 실행 시 연산을 수행한다.
	//이럴 경우, 정수형은 기본적으로 int타입이 되기 때문에 변수 선언 시 int 타입으로 통일해야 한다. 예시 참조
	//특별한 이유가 없다면, 위 규칙에 의해 정수형 변수는 int로 선언해주는 것이 성능 향상에 도움이 된다.
	//피연산자가 int보다 큰 long 타입일 경우, 다른 피연산자 또한 long 타입으로 변환되어 연산을 수행한다.
	//이럴 경우, 연산 결과가 대입될 변수 또한 long 타입이어야 한다.
	
	//실수의 경우도 위와 같으며, float 간 연산은 float대로 실행한다.
	//float보다 큰 double이 피연산자로 들어간다면, 다른 피연산자도 double로 변환되고 결과 변수도 double 타입이어야 한다.
	//피연산자에 정수가 섞일 경우, 정수를 실수 타입으로 자동 타입 변환(기본 double로)되어 실행된다.
	//연산결과 변수의 타입을 실수로 해도, 피연산자가 정수일 경우에는 결과값이 실수로 나오지 않는다. 아래 예제 참고
	
	//자바에서의 +연산자는 두 가지 기능을 가진다.
	//1) 피연산자가 모두 숫자일 경우에는 덧셈 연산을 수행한다.
	//2) 피연산자에 문자'열' 이 있을 경우, 나머지 피연산자를 문자열로 변환하여 문자열 간 결합 연산을 수행한다.
	//+연산자가 여러 개 존재할 경우, 앞에서부터 순차적으로 진행한다.
	//덧셈 연산과 결합 연산이 혼재되어 있을 경우, 아래와 같은 규칙으로 진행된다
	//1)첫 연산자가 덧셈 연산일 경우, 덧셈 연산 후 다음 +연산자를 다시 판별한다.
	//2)첫 연산자가 결합 연산일 경우, 뒤의 +연산자는 모두 결합 연산으로 진행한다.
	//연산자가 여러 개 존재할 때, 특정 부분을 우선 연산하려면 괄호()로 묶어주면 최우선으로 연산을 수행한다.
	
	public static void main(String[] args) {
		//아래는 정수 간 연산 시의 자동 타입 변환 예제.
		byte x = 10;
		byte y = 20;
		byte result = 10; // 정수 리터럴로 직접 초기화 시, 이렇게 가능.
		//byte result2 = x + y; 이 줄처럼, 변수를 이용한 연산으로 초기화하는 변수를 byte로 할수 없다.
		//위 줄과 같은 경우에는 변수 간 연산은 int로 변환되어 실행하기 때문에, 선언하는 변수도 int타입으로 선언해줘야 한다.
		int result2 = x + y;
		long result3 = 15;
		int result4 = 20;
		//int result5 = result3 + result4; 피연산자에 long타입이 있어, int형 변수에 저장 불가.
		//int 부분은 long보다 작은 범위 타입(byte, char, short, int 전부 해당)이라면 전부 저장 불가.
		long result5 = result3 + result4; // 연산결과쪽 변수를 long타입으로 선언해야 가능하다.
		
		//아래는 실수 간 연산 시의 자동 타입 변환 예제.
		float f1 = 1.2f + 3.4f; // f가 붙은 float 간 연산이므로, 별다른 변경사항 없음.
		System.out.println(f1);
		
		int intValue = 10;
		double doubleValue = 5.5;
		double doubleresult = intValue + doubleValue; // 정수와 실수 연산이므로, 정수 부분을 실수로 자동 변환한다.
		
		//아래
		int a = 1;
		int b = 2;
		double c = x / y;
		System.out.println(c); // 0.5가 출력되지 않음에 유의.
		//이유는, 등호 우측의 연산 실행 시, 정수 간 연산이므로 0.5가 아닌 0으로 처리되기 때문이다.
		//이후, double타입인 c에 0이 대입되므로, 자동 타입 변환되어 0.0으로 출력된다.
		//아래는 위 상황을 해결할 예제 3개.
		c = (double) a/ b; // a를 double로 변환했으므로, b도 double로 변환되어 실수 계산 후 대입.
		c = a /(double) b; // 위와 같은 방식.
		c = (double)a / (double) b; // 위와 연산 방식은 같으나, 두 변수 모두를 연산 전 형변환하는 경우.
		//c = (double)(a/b); 해당 경우는 괄호 처리로 인해 (a/b)를 먼저 하므로, 정수 간 연산이 되어 안됨.
		
		//아래는 다양한 연산 시 자동 타입 변환 예제.
		
		byte result1 = 10 + 20;
		System.out.println("result1 : " + result1); // 리터럴 연산이므로 컴파일 시 연산.
		
		byte v1 = 10;
		byte v2 = 20;
		int r2 = v1 + v2; // int 타입으로 변환 후 연산된다.
		
		byte v3 = 10;
		int v4 = 100;
		long v5 = 1000L;
		long r3 = v3 + v4 + v5; // long 타입으로 변환 후 연산
		System.out.println("r3 : " + r3);
		
		char v6 = 'A';
		char v7 = 1;
		int r4 = v6 + v7;
		System.out.println("r4 : " + r4); // char형의 각 유니코드를 더한 값을 정수로 출력
		System.out.println("r4 to char : " + (char)r4); // 더한 유니코드 값의 문자를 출력
		
		int v8 = 10;
		int r5 = v8 / 4;
		System.out.println("r5 : " + r5); // 정수부분 계산 후, 나머지를 버리고 출력
		
		int v9 = 10;
		double r6 = v9 / 4.0;
		System.out.println("r6 : " + r6); // 실수 - 정수간 계산이므로 실수로 변환+계산 후 실수 전체 출력
		
		int v10 = 1;
		int v11 = 2;
		double r7 = (double)v10 / v11;
		System.out.println("r7 : " + r7); // 타입 변환된 실수 - 정수간 계산이므로 실수 전체 출력
		 
		//아래는 +연산자의 두 가지 기능 별 예제.
		int Value = 3 + 7; // 숫자가 피연산자일 때 덧셈 수행. Value = 10;
		String str = "3" + 7; // 문자열과 숫자 연산이므로, 숫자 7을 문자열로 변환 + 결합하여 37 출력.
		str = 3 + "7"; // 숫자와 문자열 연산이므로, 위와 같이 문자열로 변환 + 결합하여 37이 출력된다.
		
		//아래는 여러 개의 연산자가 존재할 때의 연산 규칙에 대한 예제.
		int V = 1 + 2 + 3; // 덧셈 연산만 존재하므로, 앞에서부터 계산하여 3 + 3, 6 순으로 계산.
		String str1 = 1 + 2 + "3"; // 덧셈 연산 + 결합 연산이므로, 덧셈연산 후 결합연산 진행. 3 + "3"이 되어 "33"이 된다.
		String str2 = 1 + "2" + 3; // 첫 연산이 결합 연산이므로, 이후 연산은 모두 결합 연산. "123"이 된다.
		String str3 = "1" + 2 + 3; // 위와 같이, 결합 연산으로 시작하여 모두 결합 연산으로 진행. "123"이 된다.
		
		//아래는 괄호로 묶어 최우선으로 연산을 수행하는 예제.
		String str4 = "1" + (2+3); // 괄호 내 숫자 간 덧셈 연산 후, 바깥의 결합 연산을 수행하여 "15" 출력.
		
		//아래는 다양한 숫자/결합 연산 예제.
		int R1 = 10 + 2 + 8;
		System.out.println("R1 : " + R1); // 숫자간 덧셈 연산으로 20 출력.
		
		String R2 = 10 + 2 + "8";
		System.out.println("R2 : " + R2); // 덧셈 연산 후 결합 연산하여 128 출력.
		
		String R3 = 10 + "2" + 8;
		System.out.println("R3 : " + R3); // 결합 연산 후 계속하여 결합 연산. 1028 출력.
		
		String R4 = "10" + 2 + 8;
		System.out.println("R4 : " + R4); // 위와 같은 연산 방식으로 쭉 결합 연산. 1028 출력.
		
		String R5 = "10" + (2+8);
		System.out.println(R5); // 괄호 내 연산 결합 후 결합 연산을 진행하여 1010 출력.
		
	}

}
