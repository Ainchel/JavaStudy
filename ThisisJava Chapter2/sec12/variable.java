package ch01.sec12;
// 변수는 컴퓨터 메모리(RAM)의 관리를 위해 컴퓨터가 저장한 특정 데이터 타입의 값 하나 만큼의 메모리 주소(번지?)를 가리키는 명칭이다.
// Java의 변수는 여러 타입의 값을 받을 수 없으므로, 지정한 타입의 데이터만 저장할 수 있다.
// 변수 사용을 위해서는 선언을 해야 하며, 선언은 데이터 타입과 변수 명칭을 결정하는 것을 일컫는다.
// 변수 이름의 첫글자는 반드시 문자여야 한다. 이후로는 문자, 숫자, &, _를 포함할 수 있다.
// 변수 이름은 캐멀 스타일(책 35페이지 참고)로 작성하며, 변수명 첫글자는 소문자로 쓰는 것이 관례.

// 아래는 숫자 유형에 따른 데이터 타입 분류
// 자바의 정수 타입 : byte, char, short, int, long
// 자바의 실수 타입 : float, double
// 자바의 논리 타입 : boolean

// 아래는 정수 타입 5개의 메모리 할당 크기 및 범위값
// 1byte = 8bit. 
// 1bit는 0 혹은 1을 저장하므로, 개수만큼의 진수 값을 표현 가능.
// byte : 1byte(8bit) => -128 ~ 127까지 
// short : 2byte(16bit) => -32768 ~ 32767까지
// char : 2byte(16bit) => 0 ~ 65535(유니코드)까지. 음수값을 저장하지 않아 양수로 2배값 저장 가능.
// int : 4byte(32bit) => 대략 -21억부터 21억까지.
// long : 8byte(64bit) => -(2의 63승)부터 (2의 63승 - 1)까지.
// 정수형 데이터 타입의 최고값 메모리 한 칸은 부호 값이며, 0일 경우 양수, 1일 경우 음수이며, 부호와 값을 동시에 가진다.
// 그렇기 때문에, 양수일 경우 음수일 때의 절대값보다 1 작은 값까지만 들어간다(양수이려면 0이 들어가야 하므로)

public class variable 
{
	public static void main (String[] args)
	{
		int x = 1; // int 데이터 타입의 메모리를 저장한 주소의 이름을 x로 선언
				   // 선언만 해둔 상태에서는, 아직 메모리를 할당받지 못한 상태임에 주의.
				   // 해당 메모리에 값 1을 저장. 코딩에서 = 는 = 우측의 값을 좌측에 대입하는 것으로 사용한다.
			       // 우리가 쓰는 '같다' 라는 의미는 ==를 사용.
		
		int y; // 선언만 하고, 초기화를 하지 않은 변수(메모리 할당 아직 안됨)
		//int result = y + 1; 해당 줄에서, 초기화되지 않은 변수 y는 값을 불러올 수 없다.
	    //위 줄처럼 작성 시, 변수 y가 초기화되지 않았다는 에러가 노출된다.
		
		//아래는 변수 활용 예제 1 - 문자열에서의 변수 사용.
		int hour = 5;
		int minute = 3;
		System.out.println(hour);
		System.out.println(minute);
		System.out.println(hour + "시간" + minute + "분");
		
		int totalMinute = (hour * 60) + minute;
		System.out.println("총" + totalMinute + "분");
		
		//아래는 변수 활용 예제 2 - 변수를 이용한 값 교환.
		
		int a = 2; // int 데이터타입 a 선언 후 값 2를 초기화.
		int b = 4; // int 데이터타입 b 선언 후 값 4를 초기화.
		
		int temp = 0; // 값 교환에 사용할 temp 선언.
					  // a = b; b = a; 이런 식으로 값 교환하려고 하면 안된다.
					  // a = b; 한 시점에서 두 값이 같아져서 교환이 안됨.
		temp = a;     // temp에 a 값을 넣어 temp == 2.
		a = b;        // a에 b값을 넣어 a = 4;
		b = temp;     // b에 원래 a 값인 2를 넣어 b = 2;
		System.out.println("a : " + a + ", b : " + b);
		
	}

}

